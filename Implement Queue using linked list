//c program to implement a queue using linked list and develop functions to perform enqueue and dequeue operations.

#include <stdio.h>

#include <stdlib.h>

struct node

{

    int info;

    struct node *ptr;

}*front,*rear,*temp,*front1;

int frontelement();

void enq(int data);

void deq();

void empty();

void display();

void create();

void queuesize();

int count = 0;

void main()

{

    int no, ch, e;

    printf("\n 1 - enque");

    printf("\n 2 - deque");

    printf("\n 3 - front element");

    printf("\n 4 - empty");

    printf("\n 5 - exit");

    printf("\n 6 - display");

    printf("\n 7 - queue size");

    create();

    while (1)

    {

        printf("\n enter choice : ");

        scanf("%d", &ch);

        switch (ch)

        {

        case 1:

            printf("enter data : ");

            scanf("%d", &no);

            enq(no);

            break;

        case 2:

            deq();

            break;

        case 3:

            e = frontelement();

            if (e != 0)

                printf("front element : %d", e);

            else

                printf("\n no front element in queue as queue is empty");

            break;

        case 4:

            empty();

            break;

        case 5:

            exit(0);

        case 6:

            display();

            break;

        case 7:

            queuesize();

            break;

        default:

            printf("wrong choice, please enter correct choice  ");

            break;

        }

    }

}

/* create an empty queue */

void create()

{

    front = rear = null;

}

/* returns queue size */

void queuesize()

{

    printf("\n queue size : %d", count);

}

/* enqueing the queue */

void enq(int data)

{

    if (rear == null)

    {

        rear = (struct node *)malloc(1*sizeof(struct node));

        rear->ptr = null;

        rear->info = data;

        front = rear;

    }

    else

    {

        temp=(struct node *)malloc(1*sizeof(struct node));

        rear->ptr = temp;

        temp->info = data;

        temp->ptr = null;

        rear = temp;

    }

    count++;

}

/* displaying the queue elements */

void display()

{

    front1 = front;

    if ((front1 == null) && (rear == null))

    {

        printf("queue is empty");

        return;

    }

    while (front1 != rear)

    {

        printf("%d ", front1->info);

        front1 = front1->ptr;

    }

    if (front1 == rear)

        printf("%d", front1->info);

}

/* dequeing the queue */

void deq()

{

    front1 = front;

    if (front1 == null)

    {

        printf("\n error: trying to display elements from empty queue");

        return;

    }

    else

        if (front1->ptr != null)

        {

            front1 = front1->ptr;

            printf("\n dequed value : %d", front->info);

            free(front);

            front = front1;

        }

        else

        {

            printf("\n dequed value : %d", front->info);

            free(front);

            front = null;

            rear = null;

        }

        count--;

}

/* returns the front element of queue */

int frontelement()

{

    if ((front != null) && (rear != null))

        return(front->info);

    else

        return 0;

}

/* display if queue is empty or not */

void empty()

{

     if ((front == null) && (rear == null))

        printf("\n queue empty");

    else

       printf("queue not empty");

} 
